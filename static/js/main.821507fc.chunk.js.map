{"version":3,"sources":["pages/Templates.js","pages/MemeSettings.js","App.js","index.js"],"names":["Templates","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","name","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","error","setError","download","setDownload","src","alt","Array","box_count","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","fetch","then","res","json","data","success","saveAs","copyImageToClipboard","App","setTemplates","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAqBeA,EArBG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,QAE5B,OACI,qBAAKC,UAAU,YAAf,SACKF,EAAUG,KAAI,SAACC,GAAD,OACX,sBAEIF,UAAU,WACVG,QAAS,kBAAMJ,EAAQG,IAH3B,UAKI,qBACIF,UAAU,QACVI,MAAO,CAAEC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,QAE5B,4BAAIJ,EAASK,SARRL,EAASM,U,+BCsFnBC,EAvFF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMX,EAAc,EAAdA,QAIpB,EAAwBY,mBAAS,CAC/BC,YAAaF,EAAKF,GAClBK,SAAU,SACVC,SAAU,kBACVC,MAAO,KAJT,mBAAOC,EAAP,KAAaC,EAAb,KAQA,EAA0BN,oBAAS,GAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAEA,EAAgCR,oBAAS,GAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KAkCA,OACE,sBAAKrB,UAAU,OAAf,UACE,4BAAIU,EAAKH,OACT,qBAAKe,IAAKZ,EAAKJ,IAAKiB,IAAI,KAGxB,8BACG,YAAIC,MAAMd,EAAKe,YAAYxB,KAAI,SAACyB,EAAGC,GAAJ,OAC9B,uBAEEC,KAAK,OACLC,YAAW,uBAAkBF,EAAQ,GACrCG,SAAU,SAACC,GACT,IAAMC,EAAWhB,EAAKD,MACtBiB,EAASL,GAAS,CAAEM,KAAMF,EAAEG,OAAOC,OACnClB,EAAQ,2BAAKD,GAAN,IAAYD,MAAOiB,OANvBL,QAaVT,GAAS,mBAAGlB,UAAU,gBAAb,oCACV,sBAAKA,UAAU,UAAf,UACE,wBAAQG,QAtDa,WAEzB,IAAIG,EAAG,4DAAwDU,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,SAApH,KACPE,EAAKD,MAAMd,KACT,SAACmC,EAAKT,GAAN,OAAiBrB,GAAG,iBAAcqB,EAAd,mBAA8BS,EAAIH,SAIxDI,MAAM/B,GACHgC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEDA,EAAKC,SAEP3C,EAAQ,2BAAKW,GAAN,IAAYJ,IAAKmC,EAAKA,KAAKnC,OAClCa,GAAS,GACTE,GAAY,KAGZF,GAAS,GACTE,GAAY,QAkCd,2BAIID,GAAY,qCACR,wBAAQjB,QAjCC,WACrBwC,iBAAO,GAAD,OAAIjC,EAAKJ,KAAT,UAAmBI,EAAKH,KAAxB,UAgCM,sBACA,wBAAQJ,QAAS,kBAAIyC,YAAqB,GAAD,OAAIlC,EAAKJ,OAAlD,qBAGR,wBAAQH,QAAS,kBAAMJ,EAAQ,OAA/B,qC,MCrDO8C,MA5Bf,WAEE,MAAkClC,mBAAS,IAA3C,mBAAOb,EAAP,KAAkBgD,EAAlB,KAEA,EAAwBnC,mBAAS,MAAjC,mBAAOD,EAAP,KAAaX,EAAb,KAYA,OATAgD,qBAAU,WACRV,MAAM,qCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAELK,EAAaL,EAAKA,KAAKO,YAE1B,IAGD,sBAAKhD,UAAU,MAAf,UACE,gDACU,OAATU,EACC,cAAC,EAAD,CAAWZ,UAAWA,EAAWC,QAASA,IAE1C,cAAC,EAAD,CAAMW,KAAMA,EAAMX,QAASA,QCtBnCkD,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.821507fc.chunk.js","sourcesContent":["const Templates = ({ templates, setMeme }) => {\r\n    // console.log(templates);\r\n    return (\r\n        <div className=\"Templates\">\r\n            {templates.map((template) => (\r\n                <div\r\n                    key={template.id}\r\n                    className=\"template\"\r\n                    onClick={() => setMeme(template)}\r\n                >\r\n                    <div\r\n                        className=\"image\"\r\n                        style={{ backgroundImage: `url(${template.url})` }}\r\n                    />\r\n                    <p>{template.name}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Templates;\r\n","import { useState } from \"react\";\r\nimport { saveAs } from \"file-saver\";\r\n// Import the copy function\r\nimport { copyImageToClipboard } from 'copy-image-clipboard'\r\n\r\nconst Meme = ({ meme, setMeme }) => {\r\n  // console.log(meme)\r\n\r\n  // for get update meme from api\r\n  const [form, setForm] = useState({\r\n    template_id: meme.id,\r\n    username: \"forLOL\",\r\n    password: \"LTfW@6rXy7wX6gQ\",\r\n    boxes: [],\r\n  });\r\n\r\n  // for handling api error\r\n  const [error, setError] = useState(false);\r\n  // handle download button\r\n  const [download, setDownload] = useState(false);\r\n\r\n  // after geting intput from user, update the url and fetch data\r\n  // render its related data\r\n  const handleGenerateMeme = () => {\r\n    // console.log(form);\r\n    let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}&`;\r\n    form.boxes.map(\r\n      (box, index) => (url += `&boxes[${index}][text]=${box.text}`)\r\n    );\r\n\r\n    // console.log(url);\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        // console.log(data);\r\n        if (data.success) {\r\n          // api call sucessfull\r\n          setMeme({ ...meme, url: data.data.url });\r\n          setError(false);\r\n          setDownload(true);\r\n        } else {\r\n          // api call unsucessfull\r\n          setError(true);\r\n          setDownload(false);\r\n        }\r\n      });\r\n  };\r\n\r\n  // for download the current meme image\r\n  const handleDownload = () => {\r\n    saveAs(`${meme.url}`, `${meme.name}.jpg`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"meme\">\r\n      <p>{meme.name}</p>\r\n      <img src={meme.url} alt=\"\" />\r\n\r\n      {/* creating input field accrounding box_count according the api request  */}\r\n      <div>\r\n        {[...Array(meme.box_count)].map((_, index) => (\r\n          <input\r\n            key={index}\r\n            type=\"text\"\r\n            placeholder={`Meme Caption ${index + 1}`}\r\n            onChange={(e) => {\r\n              const newBoxes = form.boxes;\r\n              newBoxes[index] = { text: e.target.value };\r\n              setForm({ ...form, boxes: newBoxes });\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {/* render error message when api status unsucessfull*/}\r\n      {error && <p className=\"error_message\">Fill the Caption field</p>}\r\n      <div className=\"buttons\">\r\n        <button onClick={handleGenerateMeme}>Generate Meme</button>\r\n\r\n        {/* render download button when api status sucessfull */}\r\n        {\r\n            download && <>\r\n                <button onClick={handleDownload}>Download</button>\r\n                <button onClick={()=>copyImageToClipboard(`${meme.url}`)}>Copy</button>\r\n            </>\r\n        }\r\n        <button onClick={() => setMeme(null)}>Choose Templates</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Meme;\r\n","import { useState, useEffect } from \"react\";\r\nimport Templates from \"./pages/Templates\";\r\nimport Meme from \"./pages/MemeSettings\";\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n  // for render api memeTeplates \r\n  const [templates, setTemplates] = useState([]);\r\n  // for show meme edit Page\r\n  const [meme, setMeme] = useState(null);\r\n\r\n  // fetch from api, only one\r\n  useEffect(() => {\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        // console.log(data.data);\r\n        setTemplates(data.data.memes);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Meme Generator</h1>\r\n      {meme === null ? (\r\n        <Templates templates={templates} setMeme={setMeme} />\r\n      ) : (\r\n        <Meme meme={meme} setMeme={setMeme} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.js'\r\n// import App2 from './scrimba_classComponent/App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <App2 /> */}\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}